import telebot
from telebot import types
from User import UserRepository, User
from datetime import datetime
from threading import Timer 
import yaml 
import requests
import json
import random

#–§–£–ù–ö–¶–ò–ò, –û–¢–í–ï–ß–ê–Æ–©–ò–ï –ó–ê –ß–¢–ï–ù–ò–ï/–°–û–•–†–ê–ù–ï–ù–ò–ï –§–ê–ô–õ–û–í

def openFile(path):
    with open(path, encoding="utf-8") as file:
        return yaml.safe_load(file)

def saveFile(path, data):
    with open(path, "w", encoding="utf-8") as f:
        yaml.dump(data, f, sort_keys=False, allow_unicode=True)

#–ü–ï–†–ï–ú–ï–ù–ù–´–ï

lang = openFile("storage\\lang.yaml") 
settings = openFile("storage\\settings.yaml")
teams = openFile("storage\\teams.yaml")
blacklist = openFile("storage\\blacklist.yaml")
adminlist = openFile("storage\\adminlist.yaml")
token = openFile("storage\\tokens.yaml")

LoggerBot = telebot.TeleBot(settings["LoggerBotToken"], skip_pending=True)
bot = telebot.TeleBot(settings["BotToken"], skip_pending=True)

adminchat = settings["adminchat"]
chat = settings["chat"]
CheckList = []
GameIDs = set()
timeTasks = {}

userRepository = UserRepository().load(settings)

#–õ–û–ì–ò–†–û–í–ê–ù–ò–ï

def userLogging(ChatID, first_name, text):
    log = "üë§ | " + datetime.now().strftime("%H:%M:%S") + " | " + first_name + "(" + str(ChatID) + ") | " + text
    LoggerBot.send_message(1193654237, log)

def botLogging(ChatID, action):
    log = "ü§ñ | " + datetime.now().strftime("%H:%M:%S") + " | BOT to " + str(ChatID) + " | " + action
    LoggerBot.send_message(1193654237, log)

#–û–¢–î–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

def checkChatID(id):
    if id != adminchat and id != chat:
        return True
    botLogging(id, "InvalidChatID")
    bot.send_message(id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º(@AboBS_bot)")
    return False


def getUserStats(tag, id):
    user: User = userRepository.get(id)
    url = "https://api.brawlstars.com/v1/players/%23" + tag
    r = requests.get(url, headers={"Authorization": settings["AuthKey"]})
    if r.status_code != 200:
        text = "–ò–≥—Ä–æ–∫ –ø–æ–¥ –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."
    else:
        data = json.loads(r.text)
        if user.j_Status is True:
            user.j_Nickname = data["name"]
            text = "üë§ –ù–∏–∫: <a href='tg://user?id=" + str(id) + "'>" + data["name"] + "</a>\n"
        else:
            text = "üë§ –ù–∏–∫: <b>" + data["name"] + "</b>\n"    
        text += "üéÆ ID: <code>" + data["tag"] + "</code>\nüèÜ –¢—Ä–æ—Ñ–µ–∏: <b>" + str(data["trophies"]) + "</b>\nüèÖ –ú–∞–∫—Å. —Ç—Ä–æ—Ñ–µ–µ–≤: <b>" + str(data["highestTrophies"]) + "</b>\n" + "‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: <b>" + str(data["expLevel"])
        if data["club"]:
            text += "</b>\nüë• –ö–ª—É–±: <b>" + data["club"]["name"]
        else:
            text += "</b>\nüë• –ö–ª—É–±: <b>–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç"
        text +=  "</b>\nü•á –ü–æ–±–µ–¥ –≤ —Å–æ–ª–æ: <b>" + str(data["soloVictories"]) + "</b>\nü•à –ü–æ–±–µ–¥ –≤ –¥—É–æ: <b>" + str(data["duoVictories"]) + "</b>\nü•â –ü–æ–±–µ–¥ –≤ —Ç—Ä–∏–æ: <b>" + str(data["3vs3Victories"]) + "</b>\nüèãüèø –ë–æ–π—Ü—ã –Ω–∞ 11 —Å–∏–ª–µ: "
        brawlersAt11Lvl = 0
        brawlersAt10Lvl = 0
        brawlersAt26Rank = 0
        brawlersAt30Rank = 0
        stack = 0
        for i in range(len(data["brawlers"])):
            if data["brawlers"][i]["rank"] >= 30:
                brawlersAt30Rank += 1
            elif data["brawlers"][i]["rank"] > 25:
                brawlersAt26Rank += 1
            if data["brawlers"][i]["power"] == 11:
                if stack % 3 == 0:
                    text += "\n        "
                text += "<b>" + lang[data["brawlers"][i]["name"]] + "</b>, "
                brawlersAt11Lvl += 1
                stack += 1
            elif data["brawlers"][i]["power"] == 10:
                brawlersAt10Lvl += 1
        text = text[:len(text)-2] + "\nüîπ –í—Å–µ–≥–æ 11-—ã—Ö —É—Ä–æ–≤–Ω–µ–π: <b>" + str(brawlersAt11Lvl) + "</b>\nüîπ –í—Å–µ–≥–æ 10-—ã—Ö —É—Ä–æ–≤–Ω–µ–π: <b>" + str(brawlersAt10Lvl) + "</b>\nüî∏ –ë–æ–π—Ü–æ–≤ –Ω–∞ 26-29 —Ä–∞–Ω–≥–µ: <b>" + str(brawlersAt26Rank) + "</b>\nüî∏ –ë–æ–π—Ü–æ–≤ –Ω–∞ 30-35 —Ä–∞–Ω–≥–µ: <b>" + str(brawlersAt30Rank) + "</b>"
    return text


def DayStart(day):
    text = "–í—Å–µ—Ö –ø—Ä–∏–≤–µ—Ç–≤—É—é, —á–µ—Ä–µ–∑ 7 —á–∞—Å–æ–≤ –Ω–∞—á–Ω—ë—Ç—Å—è " + day + " –¥–µ–Ω—å –ª–∏–≥–∏ –∫–ª—É–±–æ–≤. –ö–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å:"
    for i in teams.keys():
        text += "\n–ö–æ–º–∞–Ω–¥–∞ ‚Ññ" + str(i) + ": "
        teams[i]["time"] = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
        for id in teams[i]["users"]:
            if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                user: User = userRepository.get(id)
                user.t_Dict = {'17': [['', '00'], ['', '20'], ['', '40']], '18': [['', '00'], ['', '20'], ['', '40']], '19': [['', '00'], ['', '20'], ['', '40']], '20': [['', '00'], ['', '20'], ['', '40']], '21': [['', '00'], ['', '20'], ['', '40']], '22': [['', '00'], ['', '20'], ['', '40']], '23': [['', '00'], ['', '20'], ['', '40']], '08': [['', '00'], ['', '20'], ['', '40']], '09': [['', '00'], ['', '20'], ['', '40']], '10': [['', '00'], ['', '20'], ['', '40']], '11': [['', '00'], ['', '20'], ['', '40']], '12': [['', '00'], ['', '20'], ['', '40']], '13': [['', '00'], ['', '20'], ['', '40']], '14': [['', '00'], ['', '20'], ['', '40']], '15': [['', '00'], ['', '20'], ['', '40']], '16': [['', '00'], ['', '20'], ['', '40']]}
                markup = types.InlineKeyboardMarkup(row_width=4)
                for h in user.t_Dict.keys():
                    vHour = visualTime(int(h), user.timeZone)
                    markup.add(types.InlineKeyboardButton(vHour, callback_data='4' + str(h)), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][0][0] != '' else '') + vHour + ":" + user.t_Dict[h][0][1], callback_data='4' + str(h) + '0'), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][1][0] != '' else '') + vHour + ":" + user.t_Dict[h][1][1], callback_data='4' + str(h) + '1'), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][2][0] != '' else '') + vHour + ":" + user.t_Dict[h][2][1], callback_data='4' + str(h) + '2'))
                markup.add(types.InlineKeyboardButton(text='–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –º–∏–Ω–∏–º—É–º 8 –≤—Ä–µ–º—ë–Ω', callback_data="None"))
                user.t_MessageID = bot.send_message(id, "–°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è " + day + " –¥–µ–Ω—å –∫–ª—É–±–Ω–æ–π –ª–∏–≥–∏! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–∞, –∫–æ–≥–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –∏–≥—Ä—ã. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å! (–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 8 –≤—Ä–µ–º–µ–Ω)", reply_markup=markup).message_id
                text += "\n   - <a href='tg://user?id=" + str(id) + "'>" + user.nickname + "</a>"
    text += """
\n\n–ö–∞–∂–¥–æ–º—É –∏–∑ –≤–∞—Å —è –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—É —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–µ—Ä–µ—Ç –≤—Ä–µ–º–µ–Ω–∞, —è –ø—Ä–∏—à–ª—é –≤–∞–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã. –õ—É—á—à–µ –≤—ã–±–∏—Ä–∞—Ç—å <b>–∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º—ë–Ω</b>, 
–≤–µ–¥—å –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è —Ä–µ—à–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.  
–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. <b>–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º—ë–Ω –ø—Ä–æ—Å—å–±–∞ —Ç—ã–∫–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ –±—ã—Å—Ç—Ä–æ, —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥—Ä–∞–º —É—Å–ø–µ–ª –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.</b> –ñ–µ–ª–∞—é –≤—Å–µ–º —É–¥–∞—á–∏!
"""
    botLogging("chat", "DayStart")
    bot.send_message(chat, text, parse_mode="HTML")
    saveFile("storage\\settings.yaml", settings)
    saveFile("storage\\teams.yaml", teams)

def CheckTable(day):
    text = "–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–Ω—ë—Ç—Å—è " + day + " –¥–µ–Ω—å –∫–ª—É–±–Ω–æ–π –ª–∏–≥–∏! –†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å: "
    for i in range(1, 11):
        text += "\n–ö–æ–º–∞–Ω–¥–∞ " + str(i) + " ("
        for id in teams[i]["users"]:
            if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                user: User = userRepository.get(id)
                user.t_Dict = {}
                if day == "—Ç—Ä–µ—Ç–∏–π":
                    CheckList.append([id, 3])
                else:
                    CheckList.append([id, 2])
                text += user.nickname + ", "
                if teams[i]["time"] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                    bot.send_message(id, "–ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—à–∏—Ö —Ç–∏–º–µ–π—Ç–æ–≤ —Ç–∞–∫ –∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å, –ø–æ—ç—Ç–æ–º—É —Ç–µ–ø–µ—Ä—å –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –≤—Ä–µ–º—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ)")
                    bot.delete_message(id, user.t_MessageID)
    
        text = text[:len(text)-2] + (") - <b>" + teams[i]["time"] + "</b>")
    botLogging("chat", "CheckTable")
    saveFile("storage\\settings.yaml", settings)    
    bot.send_message(chat, text + "\n–ñ–µ–ª–∞—é –≤—Å–µ–º —É–¥–∞—á–∏!", parse_mode="HTML")

def EndOfTheDay(day):
    text = day + " –¥–µ–Ω—å –∫–ª—É–±–Ω–æ–π –ª–∏–≥–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è! –ù–∞—à –∫–ª—É–± –Ω–∞–±—Ä–∞–ª: <b>" + str(settings["ClubTrophies"]) + " –æ—á–∫–æ–≤</b>. –†–µ–π—Ç–∏–Ω–≥ –∫–ª—É–±–∞ –ø–æ –æ—á–∫–∞–º: "
    leaderList = {}
    for i in range(1, 11):
        teams[i]['time'] = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'
        for id in teams[i]["users"]:
            if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                settings['user'][id]["TimeForCL"] = []
                user: User = userRepository.get(id)
                user.times = []
                if settings['user'][id]['WeekTropheys'] not in leaderList:
                    leaderList[settings['user'][id]['WeekTropheys']] = [settings['user'][id]['Nickname']]
                else:
                    leaderList[settings['user'][id]['WeekTropheys']].append(settings['user'][id]['Nickname'])
    saveFile("storage\\settings.yaml", settings)   
    saveFile("storage\\teams.yaml", teams)   
    sorted(leaderList.keys(), reverse=True)
    position = 1
    for i in leaderList.keys():
        text += "\n<b>#" + str(position) + " " + str(i) + " –æ—á–∫–æ–≤</b>: "
        for j in leaderList[i]:
            text += j + ", "
        text = text[:len(text)-2]
        position += 1
    botLogging("chat", "EndOfTheDay")
    bot.send_message(chat, text, parse_mode="HTML")
def FindCommonTime(team, id):
    times = []
    players = []
    for id in teams[team]["users"]:
        if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            user: User = userRepository.get(id)
            if not user.times:
                return '–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –≤–∞—à–∏ —Ç–∏–º–µ–π—Ç—ã —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.', "None"
            else:
                players.append(user.times)
    if len(players) == 3:
        times = list(set(players[0]) & set(players[1]) & set(players[2]))
    elif len(players) == 2:
        times = list(set(players[0]) & set(players[1]))
    else:
        times = players[0]
    if times:
        time = random.choice(times)
        teams[team]["time"] = time
        timeTasks[time].append([team, "Game"])
        h = time[:2]
        m = time[3:]
        if m == "00":
            m = "40"
            h = str(int(h)-1)
            if len(h) == 1:
                h = "0" + h
        elif m == "20":
            m = "00"
        else:
            m = "20"  
        timeTasks[h+":"+m].append([team, "Remind"])
        saveFile("storage\\teams.yaml", teams)
        return "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞! –û–±—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–∫–∞–∑–∞–ª–æ—Å—å <b>", time
    else:
        #botLogging(id, "FCT team: " + str(team)) + " TimeNotFound"
        return "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å.", "NotFound"

def visualTime(hour, td):
    hour += td
    if hour > 23: hour -= 24 
    if hour < 0: hour += 24
    if len(str(hour)) == 1: return "0" + str(hour)
    return str(hour)

#–¶–ò–ö–õ–ò–ß–ù–ê–Ø –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø

def check():
    Timer(60, check).start()
    date = datetime.now().strftime('%a/%H:%M')
    week = int(datetime.now().strftime('%W')) % 2
    if date == 'Wed/08:00' and week == 1:
        DayStart("–ø–µ—Ä–≤—ã–π")
    elif date == 'Fri/08:00' and week == 1:
        DayStart("–≤—Ç–æ—Ä–æ–π")
    elif date == 'Sun/13:22' and week == 1:
        DayStart("—Ç—Ä–µ—Ç–∏–π")
    if date == 'Wed/16:50' and week == 1:
         CheckTable("–ø–µ—Ä–≤—ã–π")
    elif date == 'Fri/16:50' and week == 1:
         CheckTable("–≤—Ç–æ—Ä–æ–π")
    elif date == 'Sun/16:50' and week == 1:
         CheckTable("—Ç—Ä–µ—Ç–∏–π")
    if date == 'Thu/17:05' and week == 1:
        EndOfTheDay("–ü–µ—Ä–≤—ã–π")
    elif date == 'Sat/17:05' and week == 1:
        EndOfTheDay("–í—Ç–æ—Ä–æ–π")
    elif date == 'Mon/17:05' and week == 0:
        EndOfTheDay("–¢—Ä–µ—Ç–∏–π")      
    date = datetime.now().strftime('%H:%M')
    if date in timeTasks:
        for i in timeTasks[date]:
            if i[1] == "Remind":
                for id in teams[i[0]]["users"]:
                    if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                        bot.send_message(id, "<b>–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç –≤—ã —Å–æ–±–∏—Ä–∞–ª–∏—Å—å –ø–æ–π—Ç–∏ –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É!</b>", parse_mode="HTML")
                        botLogging(id, "GameReminder1")
                timeTasks[date].remove(i)
            else:
                for id in teams[i[0]]["users"]:
                    if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                        bot.send_message(id, "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –∏–≥—Ä—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–∏—Ö —Ç–∏–º–º–µ–π—Ç–æ–≤.*", parse_mode="Markdown")
                        botLogging(id, "GameReminder2")
                timeTasks[date].remove(i)
            if len(timeTasks[date]) == 0:
                del timeTasks[date]
    for i in range(len(CheckList)):
        url = 'https://api.brawlstars.com/v1/players/%23' + settings["user"][CheckList[i][0]]["Tag"] + "/battlelog"
        r = requests.get(url, headers={'Authorization': settings["AuthKey"]})
        data = json.loads(r.text)
        if data["items"][0]["battle"]["type"] == "teamRanked" and "trophyChange" in data["items"][0]["battle"]:
            if CheckList[i][1] == 1:
                CheckList.pop(i)
            else:
                CheckList[i][1] -= 1
            settings['user'][CheckList[i][0]]['DayTropheys'] += data["items"][0]["battle"]["trophyChange"]
            settings['user'][CheckList[i][0]]['WeekTropheys'] += data["items"][0]["battle"]["trophyChange"]
            settings['user'][CheckList[i][0]]['TotalTropheys'] += data["items"][0]["battle"]["trophyChange"]
            settings['ClubTrophies'] += data["items"][0]["battle"]["trophyChange"]
            if data["items"][0]["event"]["id"] not in GameIDs:
                GameIDs.add(data["items"][0]["event"]["id"])
                if data["items"][0]["battle"]["result"] == "victory":
                    text = "*–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞* \n–°—Ç–∞—Ç—É—Å: *–ü–û–ë–ï–î–ê* \n–†–µ–∂–∏–º: *" + data["items"][0]["event"]["mode"] + "*\n–ö–∞—Ä—Ç–∞: *" + data["items"][0]["event"]["map"] + "*" + "\n–ó–≤—ë–∑–¥–Ω—ã–π –∏–≥—Ä–æ–∫: *" + data["items"][0]["battle"]["starPlayer"]["name"] + "\n–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥: *"
                for j in range(0, 3): 
                    text += "\nüü¶ *" + data["items"][0]["battle"]["teams"][0][j]["name"] + "* (`" + data["items"][0]["battle"]["teams"][0][j]["tag"]  + "`), *" + lang[data["items"][0]["battle"]["teams"][0][j]["brawler"]["name"]] + "(" + str(data["items"][0]["battle"]["teams"][0][j]["brawler"]["power"]) + " —É—Ä.)*"
                for j in range(0, 3):
                    text += "\nüü• *" + data["items"][0]["battle"]["teams"][1][j]["name"] + "* (`" + data["items"][0]["battle"]["teams"][1][j]["tag"]  + "`), *" + lang[data["items"][0]["battle"]["teams"][1][j]["brawler"]["name"]] + "(" + str(data["items"][0]["battle"]["teams"][1][j]["brawler"]["power"]) + " —É—Ä.)*"
                bot.send_message(chat, text, parse_mode="Markdown")
                botLogging(CheckList[i][0], "MatchInfo")

#–û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô

@bot.message_handler(commands=["del"])
def dele(message):
    for id in settings["userlist"]:
        user: User = userRepository.get(id)
        bot.delete_message(id, user.t_MessageID)
@bot.message_handler(commands=["ds"])
def DS(message):
    DayStart("–ø–µ—Ä–≤—ã–π")
@bot.message_handler(commands=["ct"])
def CT(message):
    CheckTable("–ø–µ—Ä–≤—ã–π")
@bot.message_handler(commands=["ed"])
def ED(message):
    EndOfTheDay("–ü–µ—Ä–≤—ã–π")
@bot.message_handler(commands=["start"])
def startCMD(message):
    id = message.chat.id
    userLogging(id, message.from_user.first_name, message.text)
    if checkChatID(id):
        botLogging(id, "WelcomeMessage")
        bot.send_message(id, "–ü—Ä–∏–≤–µ—Ç," + message.from_user.first_name + """. –Ø —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –±–æ—Ç –∫–ª—É–±–∞ ABOBA. –Ø –æ—Ç–≤–µ—á–∞—é –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª—É–±, –≤—ã–±–æ—Ä –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–≥—Ä—ã –≤ –∫–ª—É–±–Ω—É—é –ª–∏–≥—É —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∫–ª—É–±–Ω—ã—Ö –±–æ–µ–≤. 
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∫–ª—É–±, —Ç–æ –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /join""")


@bot.message_handler(commands=["join"])
def joinCMD(message):
    id = message.chat.id
    userLogging(id, message.from_user.first_name, message.text)
    if checkChatID(id):
            if id not in blacklist:
                user: User = userRepository.get(id)
                user.j_Status = True
                botLogging(id, "WaitingForTheTag")
                bot.send_message(id, "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—à –∫–ª—É–±, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π ID –∏–∑ –∏–≥—Ä—ã. –ë—É–¥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ç–≤–æ–∏ –æ–±—â–∏–µ –∫—É–±–∫–∏, –ø–æ–±–µ–¥—ã –≤ —Ç—Ä–∏–æ, —Å–∏–ª–æ–≤–∞—è –ª–∏–≥–∞, –∞ —Ç–∞–∫–∂–µ —Å–∏–ª—ã –±–æ–π—Ü–æ–≤.")
            else:
                botLogging(id, "ApplicationHasBeenSentBefore")
                bot.send_message(id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É —Ä–∞–Ω–µ–µ!")

@bot.message_handler(commands=["settimezone"])
def setTimeZone(message):
    id = message.chat.id
    if id in settings['userlist'] or id == chat or id == adminchat:
        if checkChatID(id):
            markup = types.InlineKeyboardMarkup(row_width=6)
            differences = [['-14', '-13', '-12', '-11', '-10', '-9'], ['-8', '-7', '-6', '-5', '-4', '-3'], ['-2', '-1', '0', '+1', '+2', '+3'], ['+4', '+5', '+6', '+7', '+8', '+9']]
            for i in differences:
                markup.add(types.InlineKeyboardButton(i[0], callback_data="6"+i[0]), types.InlineKeyboardButton(i[1], callback_data="6"+i[1]), types.InlineKeyboardButton(i[2], callback_data="6"+i[2]), types.InlineKeyboardButton(i[3], callback_data="6"+i[3]), types.InlineKeyboardButton(i[4], callback_data="6"+i[4]), types.InlineKeyboardButton(i[5], callback_data="6"+i[5]))
            bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ(0).", reply_markup=markup)
    else:
        bot.send_message(id, "–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª—É–±–∞ ABOBA. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞–º, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /join")

@bot.message_handler(commands=["playerinfo"])
def PlayerInfo(message):
    id = message.chat.id
    userLogging(id, message.from_user.first_name, message.text)
    if checkChatID(id):
        user: User = userRepository.get(id)
        user.i_Status = True
        botLogging(id, "WaitingForTheTag")
        bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")
        

@bot.message_handler(commands=['editteams'])
def EditTeams(message):
    id = message.chat.id
    if id in adminlist:
        botLogging(id, "EditTeams: ChooseTeam")
        user: User = userRepository.get(id)
        user.editteams()
        markup = types.InlineKeyboardMarkup(row_width=2)
        text = '<b>–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
        for i in range(1, 11):
            text += '\n<b>–ö–æ–º–∞–Ω–¥–∞ ' + str(i) + ': </b>' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][0] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][0]]["Nickname"]) + ', '
            text += ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][1] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][1]]["Nickname"]) + ', ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][2] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][2]]["Nickname"])
        for i in range(1, 11, 2):
            markup.add(types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥–∞ ' + str(i), callback_data='1' + str(i)), types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥–∞ ' + str(i+1), callback_data='1' + str(i+1)))
        bot.send_message(id, text, reply_markup=markup, parse_mode='HTML')
    else:
        botLogging(id, "EditTeams: NotAdmin")


@bot.message_handler(content_types=["text"])
def handleText(message):
    id = message.chat.id
    tag = message.text.upper()
    if tag[0] == "#":
        tag = tag[1:]
    if id != adminchat and id != chat:
        userLogging(id, message.from_user.first_name, message.text)
        user: User = userRepository.get(id)
        if user:
            if user.j_Status:
                user.j_Tag = tag
                text = getUserStats(tag, id)
                if text[0] != "–ò":
                    blacklist.append(id)
                    saveFile("storage\\blacklist.yaml", blacklist)
                    user.j_Text = text 
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    btn1 = types.InlineKeyboardButton(" –ü–†–ò–ù–Ø–¢–¨ ", callback_data="+" + str(id))
                    btn2 = types.InlineKeyboardButton(" –û–¢–ö–õ–û–ù–ò–¢–¨ ", callback_data="-" + str(id))
                    markup.add(btn1, btn2)
                    bot.send_message(id, "–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –Ø —É–≤–µ–¥–æ–º–ª—é —Ç–µ–±—è –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
                    bot.send_message(adminchat, "<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:</b>\n" + text, parse_mode="HTML", reply_markup=markup)
                    user.j_Status = False
                    botLogging(id, "Send Application to adminchat")
                else:
                    botLogging(id, "Invalid tag")
                    bot.send_message(id, text)
            elif user.i_Status:
                text = getUserStats(tag, user)
                if text[0] != "–ò":
                    botLogging(id, "Send info about player")
                    bot.send_message(id, "<b>–ò–Ω—Ñ–æ–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –∏–≥—Ä–æ–∫–µ:</b> \n" + text, parse_mode="HTML")
                else:
                    bot.send_message(id, text)
                    botLogging(id, "Invalid tag")
                user.i_Status, user.i_Tag = False, None

#CALBACKS

@bot.callback_query_handler(func=lambda callback: callback.data[0] == "+" or callback.data[0] == "-")
def acceptOrDeny(call): #–ö–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å –∏ –û—Ç–∫–ª–æ–Ω–∏—Ç—å
    id = int(call.data[1:])
    user: User = userRepository.get(id)
    if call.data[0] == "+":
        bot.answer_callback_query(call.id, text="–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:</b> \n" + user.j_Text +"\n<b>–ü—Ä–∏–Ω—è—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º " + call.from_user.first_name + "</b>", parse_mode="HTML")
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton(" –ö–ª—É–± ", url="https://link.brawlstars.com/invite/band/ru?tag=28U82UGGV&token=2rfhzttd")
        btn2 = types.InlineKeyboardButton(" –ë–µ—Å–µ–¥–∞ –∫–ª—É–±–∞ ", url="https://t.me/+89YGgnypEvRhZWFi")
        markup.add(btn1, btn2)
        bot.send_message(id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ <b>–ø—Ä–∏–Ω—è—Ç–∞</b>! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π –∫–ª—É–±.\n", reply_markup=markup, parse_mode="HTML")
        settings["userlist"].append(id)
        settings["user"][id] = {"Tag": user.j_Tag, "Nickname": user.j_Nickname, "Team": 0, "TimeZoneDifference": 0, "TimeForCL": [], "WeekTropheys": 0, "TotalTropheys": 0}
        saveFile("storage\\settings.yaml", settings)
        botLogging(id, "Application has been accepted")
        userRepository.load(settings)
        user.loadProfile(user.j_Tag, user.j_Nickname, [], 0, 0, 0, 0)
    elif call.data[0] == "-":
        bot.answer_callback_query(call.id, text="–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:</b> \n" + user.j_Text +"\n<b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º " + call.from_user.first_name + "</b>", parse_mode="HTML")
        bot.send_message(id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>.", parse_mode="HTML")
        botLogging(id, "Application has been declined")

@bot.callback_query_handler(func=lambda callback: callback.data[0] == '4')
def timeTableClick(call): 
    id = call.message.chat.id
    user: User = userRepository.get(id)
    markup = types.InlineKeyboardMarkup(row_width=4)
    if len(call.data) == 4:
        h = call.data[1:3]
        m = int(call.data[3])
        if user.t_Dict[h][m][0] == '':
            user.t_Dict[h][m][0] = '‚úÖ'
            user.t_Counter += 1
        else:
            user.t_Dict[h][m][0] = ''
            user.t_Counter -= 1
    else:
        h = call.data[1:3]
        if user.t_Dict[h][0][0] == '‚úÖ' or user.t_Dict[h][1][0] == '‚úÖ' or user.t_Dict[h][2][0] == '‚úÖ':
            for i in range(3):
                if user.t_Dict[h][i][0] == '‚úÖ':
                    user.t_Dict[h][i][0] = ''
                    user.t_Counter -= 1
        else:
            for i in range(3):
                if user.t_Dict[h][i][0] == '':
                    user.t_Dict[h][i][0] = '‚úÖ' 
                    user.t_Counter += 1        

    for h in user.t_Dict.keys():
        vHour = visualTime(int(h), user.timeZone)
        markup.add(types.InlineKeyboardButton(vHour, callback_data='4' + str(h)), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][0][0] != '' else '') + vHour + ":" + user.t_Dict[h][0][1], callback_data='4' + str(h) + '0'), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][1][0] != '' else '') + vHour + ":" + user.t_Dict[h][1][1], callback_data='4' + str(h) + '1'), types.InlineKeyboardButton(('‚úÖ' if user.t_Dict[h][2][0] != '' else '') + vHour + ":" + user.t_Dict[h][2][1], callback_data='4' + str(h) + '2'))
    if user.t_Counter >= 8:
        markup.add(types.InlineKeyboardButton('–°–û–•–†–ê–ù–ò–¢–¨', callback_data='5'))
    else:
        markup.add(types.InlineKeyboardButton('–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –º–∏–Ω–∏–º—É–º ' + str(8 - user.t_Counter) + ' –≤—Ä–µ–º—ë–Ω', callback_data="0"))
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data[0] == '1')
def callback2(call): #–í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    id = call.message.chat.id
    user: User = userRepository.get(id)
    user.e_selectedTeam = int(call.data[1:]) 
    markup = types.InlineKeyboardMarkup(row_width=3)
    for i in range(3):
        if teams[user.e_selectedTeam]['users'][i] != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            markup.add(types.InlineKeyboardButton(settings["user"][teams[user.e_selectedTeam]['users'][i]]["Nickname"], callback_data='2' + str(i)))
        else:
            markup.add(types.InlineKeyboardButton("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ", callback_data='2' + str(i)))
    bot.edit_message_text(chat_id=id, message_id=call.message.message_id, text='–ö–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data[0] == '2')
def callback3(call): #–∑–∞–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
    id = call.message.chat.id
    user: User = userRepository.get(id)
    user.e_selectedUser = int(call.data[1:])
    n = len(settings['userlist'])
    markup = types.InlineKeyboardMarkup(row_width=3)
    if n >= 3:
        for i in range(0, (n - n % 3), 3):
            markup.add(types.InlineKeyboardButton(settings["user"][settings['userlist'][i]]["Nickname"], callback_data='3' + str(settings['userlist'][i])), types.InlineKeyboardButton(settings["user"][settings['userlist'][i+1]]["Nickname"], callback_data='3' + str(settings['userlist'][i+1])), types.InlineKeyboardButton(settings["user"][settings['userlist'][i+2]]["Nickname"], callback_data='3' + str(settings['userlist'][i+2])))
    if n % 3 == 2:
        markup.add(types.InlineKeyboardButton(settings["user"][settings['userlist'][n-2]]["Nickname"], callback_data='3' + str(settings['userlist'][n-2])), types.InlineKeyboardButton(settings["user"][settings['userlist'][n-1]]["Nickname"], callback_data='3' + str(settings['userlist'][n-1])), types.InlineKeyboardButton('–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', callback_data='3' + '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'))
    elif n % 3 == 1:
        markup.add(types.InlineKeyboardButton(settings['user'][settings['userlist'][n-1]]['Nickname'], callback_data='3' + str(settings['userlist'][n-1])), types.InlineKeyboardButton('–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', callback_data='3' + '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'))    
    else:
        markup.add(types.InlineKeyboardButton('–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', callback_data='3' + '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'))
    bot.edit_message_text(chat_id=id, message_id=call.message.message_id, text='–ù–∞ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[user.e_selectedTeam]["users"][user.e_selectedUser] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings['user'][teams[user.e_selectedTeam]["users"][user.e_selectedUser]]['Nickname']) + '?', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data[0] == '3')
def changeResult(call): #—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã
    id = call.message.chat.id
    user: User = userRepository.get(id)
    if call.data[1:] != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
        user.e_replacement = int(call.data[1:]) 
    else:
        user.e_replacement = call.data[1:]
    if teams[user.e_selectedTeam]['users'][user.e_selectedUser] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
        if user.e_replacement == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</b> –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ <b>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ\n \n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
        else:
            text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ</b> –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ <b>' + settings['user'][user.e_replacement]["Nickname"] + '\n \n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
            user2: User = userRepository.get(user.e_replacement)
            if user2.team != 0: teams[user2.team]["users"][teams[user2.team]["users"].index(user.e_replacement)] = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
            user2.team = user.e_selectedTeam
            settings['user'][user.e_replacement]["Team"] = user.e_selectedTeam
            teams[user.e_selectedTeam]["users"][user.e_selectedUser] = user.e_replacement
    else:
        if user.e_replacement == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>' + settings["user"][teams[user.e_selectedTeam]['users'][user.e_selectedUser]]["Nickname"] + '</b> –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ <b>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ\n \n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
            user1: User = userRepository.get(teams[user.e_selectedTeam]['users'][user.e_selectedUser])
            user1.team = 0
            settings["user"][teams[user.e_selectedTeam]['users'][user.e_selectedUser]]["Team"] = 0
            teams[user.e_selectedTeam]["users"][user.e_selectedUser] = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
        else:
            text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>' + settings["user"][teams[user.e_selectedTeam]['users'][user.e_selectedUser]]["Nickname"] + '</b> –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ <b>' + settings['user'][user.e_replacement]["Nickname"] + '\n \n–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>'
            user1: User = userRepository.get(teams[user.e_selectedTeam]['users'][user.e_selectedUser])
            user1.team = 0
            settings["user"][teams[user.e_selectedTeam]['users'][user.e_selectedUser]]["Team"] = 0
            user2: User = userRepository.get(user.e_replacement)
            if user2.team != 0: teams[user2.team]["users"][teams[user2.team]["users"].index(user.e_replacement)] = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
            user2.team = user.e_selectedTeam
            settings['user'][user.e_replacement]["Team"] = user.e_selectedTeam
            teams[user.e_selectedTeam]["users"][user.e_selectedUser] = user.e_replacement
    saveFile("storage\\settings.yaml", settings)
    saveFile("storage\\teams.yaml", teams)
    for i in range(1, 11):
        text += '\n<b>–ö–æ–º–∞–Ω–¥–∞ ' + str(i) + ': </b>' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][0] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][0]]["Nickname"]) + ', ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][1] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][1]]["Nickname"]) + ', ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if teams[i]['users'][2] == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams[i]['users'][2]]["Nickname"])
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, parse_mode="HTML")
    user.editteams()
    user.e_Status = False

@bot.callback_query_handler(func=lambda callback: callback.data[0] == '5')
def saveButton(call): 
    id = call.message.chat.id
    user: User = userRepository.get(id)
    for h in user.t_Dict:
        for time in user.t_Dict[h]:
            if time[0] == '‚úÖ':
                settings["user"][id]["TimeForCL"].append(h + ":" + time[1])
                user.times.append(h + ":" + time[1])
    bot.send_message(chat, user.nickname + " - –∫—Ä–∞—Å–∞–≤—á–∏–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –±–æ—Ç—É –Ω–∞ –≤–æ–ø—Ä–æ—Åüî•")
    #userLogging(id, call.message.from_user.first_name,"SaveButton")
    saveFile("storage\\settings.yaml", settings)
    text, time = FindCommonTime(user.team, id)
    if time == "None":
        bot.edit_message_text(chat_id=id, message_id=user.t_MessageID, text=text)
    elif time == "NotFound":
        for i in teams[user.team]["users"]:
            if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                user: User = userRepository.get(i)
                bot.edit_message_text(chat_id=i, message_id=user.t_MessageID, text=text)
        bot.send_message(chat, "–ö–æ–º–∞–Ω–¥–∞ ‚Ññ" + str(user.team) + " –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–µ –≤—Ä–µ–º—è :(")
    else:
        for i in teams[user.team]["users"]:
            if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                user: User = userRepository.get(i)
                
                bot.edit_message_text(chat_id=i, message_id=user.t_MessageID, text=text + visualTime(int(time[:2]), user.timeZone) + ":" + time[3:] + "</b>", parse_mode="HTML") 
        bot.send_message(chat, "–ö–æ–º–∞–Ω–¥–∞ ‚Ññ" + str(user.team) + " –∏–≥—Ä–∞–µ—Ç –≤ " + time)      
    
@bot.callback_query_handler(func=lambda callback: callback.data[0] == '6')
def SaveTimeZone(call):
    user: User = userRepository.get(call.message.chat.id)
    user.timeZone = int(call.data[1:])
    settings["user"][call.message.chat.id]["TimeZoneDifference"] = int(call.data[1:])
    saveFile("storage\\settings.yaml", settings)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
check()
botLogging("Program", "Bot successfully started")
bot.infinity_polling(skip_pending=True)

