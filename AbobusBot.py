import requests
import yaml
import json
import telebot
from datetime import datetime
import threading
import random
from telebot import types

bot = telebot.TeleBot('5691240434:AAFOPOmDXh0VUt7gWmMCnpYKGJA8fylYM5c')
tasks = {}
adminchat = -881222268
chat = -881222268
AuthKey = 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6ImMzZGNhMDI0LTE1OWItNDQzNy1hYzgxLWJkYjJmYWFmMzQzMyIsImlhdCI6MTY2NTIwMzQ3Niwic3ViIjoiZGV2ZWxvcGVyLzI1ZDlkYWJjLTk4ZmItOGE2NS1mNDNhLWYxMzdmOTU4MjRmNCIsInNjb3BlcyI6WyJicmF3bHN0YXJzIl0sImxpbWl0cyI6W3sidGllciI6ImRldmVsb3Blci9zaWx2ZXIiLCJ0eXBlIjoidGhyb3R0bGluZyJ9LHsiY2lkcnMiOlsiOTUuMTY1LjEwLjIxMCJdLCJ0eXBlIjoiY2xpZW50In1dfQ.66RoyIwYFhIYTrhWQ7YUWQxei0jRVB4djJ0MlE1s7rImpOKWLS-9P9euTi3RBtPlFA0wKsrDhuJ-yBrHx8rPpA'

with open('lang.yaml', 'r', encoding='utf-8') as file:
    brawlers = yaml.safe_load(file)
with open('config.yaml', 'r', encoding='utf-8') as file:
    settings = yaml.safe_load(file)
with open('teams.yaml', 'r', encoding='utf-8') as file:
    teams = yaml.safe_load(file)
#print(settings)

def Check():
    #threading.Timer(60, Check).start()
    date = datetime.now()
    if date.strftime('%a/%H:%M') == 'Wed/11:00' and int(date.strftime('%W')) % 2 == 1:
        for id in settings['userlist']:
            tasks[id] = ['SetTime', {'17': ['17:00', '17:20', '17:40'], '18': ['18:00', '18:20', '18:40'], '19': ['19:00', '19:20', '19:40'], '20': ['20:00', '20:20', '20:40'], '21': ['21:00', '21:20', '21:40'], '22': ['22:00', '22:20', '22:40'], '23': ['23:00', '23:20', '23:40'], '08': ['08:00', '08:20', '08:40'], '09': ['09:00', '09:20', '09:40'], '10': ['10:00', '10:20', '10:40'], '11': ['11:00', '11:20', '11:40'], '12': ['12:00', '12:20', '12:40'], '13': ['13:00', '13:20', '13:40'], '14': ['14:00', '14:20', '14:40'], '15': ['15:00', '15:20', '15:40'], '16': ['16:00', '16:20', '16:40']}] 
            markup = types.InlineKeyboardMarkup(row_width=3)
            for i in tasks[id][1].keys():
                markup.add(types.InlineKeyboardButton(tasks[id][1][str(i)][0], callback_data='4' + str(i)+':00'), types.InlineKeyboardButton(tasks[id][1][str(i)][1], callback_data='4' + str(i)+':20'), types.InlineKeyboardButton(tasks[id][1][str(i)][2], callback_data='4' + str(i)+':40'))
    print(bot.send_message(-881222268, '–î–µ–Ω—å 1 –Ω–∞—á–Ω—ë—Ç—Å—è —É–∂–µ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –í–°–ï –≤—Ä–µ–º–µ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—É–¥–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –∫–ª–∞–Ω–æ–≤–æ–π –ª–∏–≥–∏.'))
    if date.strftime('%a/%H:%M') == 'Thu/17:00' and int(date.strftime('%W')) % 2 == 1:
        print("–î–µ–Ω—å 1 –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
    if date.strftime('%a/%H:%M') == 'Fri/11:00' and int(date.strftime('%W')) % 2 == 1:  
        print('–î–µ–Ω—å 2')
    elif date.strftime('%a/%H:%M') == 'Sun/11:00' and int(date.strftime('%W')) % 2 == 1: 
        print('–î–µ–Ω—å 3') 
Check()

def CheckMessage(message):
    id = message.chat.id
    if id != adminchat and id != chat:
        if not message.from_user.username:
            bot.send_message(id, '–í—ã –æ—Ç–≤—è–∑–∞–ª–∏ –ø—É–±–ª–∏—á–Ω–æ–µ –∏–º—è! –û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ –∑–∞ –≤–∞–º–∏ –ø—Ä–∏–¥—ë—Ç —Å–º–µ—Ä—Ç—å')
            bot.send_message(adminchat, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + message.from_user.first_name + ' –æ—Ç–≤—è–∑–∞–ª –ø—É–±–ª–∏—á–Ω–æ–µ –∏–º—è! –ù–µ–æ–±—Ö–æ–¥–∏–º —Å—Ä–æ—á–Ω—ã–π —Ä–∞—Å—Å—Ç—Ä–µ–ª.')
            return 0
        else:
            return 1
    else:
        bot.send_message(id, '–í —ç—Ç–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã.')
        return 0

def FindCommonTime(team, id):
    times = []
    players = []
    for id in teams[team]["users"]:
        if id != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            if not settings["user"][id]["TimeForCL"]:

                return '–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –≤–∞—à–∏ —Ç–∏–º–µ–π—Ç—ã —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.'
            else:
                players.append(settings["user"][id]["TimeForCL"])
    if len(players) == 2:
        times = list(set(players[0]) & set(players[1]))
    else:
        times = list(set(players[0]) & set(players[1]) & set(players[2]))
    times = random.choice(times)
    return "–û–±—â–µ–µ –≤—Ä–µ–º—è —ç—Ç–æ: " + times
@bot.message_handler(commands=['start'])
def start(message):
    id = message.chat.id
    if id != adminchat and id != chat:
        if message.from_user.username:
            if id not in settings['userlist']:
                tasks[id] = ['JoiningTheClub']
                bot.send_message(id, '–ü—Ä–∏–≤–µ—Ç, ' + message.from_user.first_name + '! –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∫–ª—É–±, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π ID –∏–∑ –∏–≥—Ä—ã.')
            else:
                bot.send_message(id, '–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –∫–ª—É–±–µ!')
        else:
            bot.send_message(id, '–ü—Ä–∏–≤–µ—Ç, ' + message.from_user.first_name + '! –ü–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –∫–ª—É–± –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—É–±–ª–∏—á–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ --> –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å --> @–í—ã–±—Ä–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).')
    else:
        bot.send_message(id, '–í –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')

@bot.message_handler(commands=['playerinfo'])
def PlayerInfo(message):
    id = message.chat.id
    if CheckMessage(message) == 1:
        bot.send_message(id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.')
        tasks[id] = ['GetPlayerInfo']
        
def GetUserStats(text):
    if text[0] == '#':
        text = text[1:]
    url = 'https://api.brawlstars.com/v1/players/%23' + text
    r = requests.get(url, headers={'Authorization': AuthKey})
    if r.status_code != 200:
        text = '–ò–≥—Ä–æ–∫ –ø–æ–¥ –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.'
    else:
        data = json.loads(r.text)
        text = 'üî∏ –ù–∏–∫: *' + data['name'] + '*\nüî∏ ID: `' + data['tag'] + '`\nüî∏ –¢—Ä–æ—Ñ–µ–∏: *' + str(data['trophies']) + '*\nüî∏ –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: *' + str(data['expLevel'])
        if data['club']:
            text += '*\nüî∏ –ö–ª—É–±: *' + data['club']['name']
        else:
            text += '*\nüî∏ –ö–ª—É–±: *–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç'
        text += '*\nüî∏ –ü–æ–±–µ–¥ –≤ —Ç—Ä–∏–æ: *' + str(data['3vs3Victories']) + '*\nüî∏ –ü–æ–±–µ–¥ –≤ —Å–æ–ª–æ: *' + str(data['soloVictories']) + '*\nüî∏ –ü–æ–±–µ–¥ –≤ –¥—É–æ: *' + str(data['duoVictories']) + '*\nüî∏ –ë–æ–π—Ü—ã –Ω–∞ 11 —Å–∏–ª–µ: '
        BrawlersAt11Lvl = 0
        BrawlersAt10Lvl = 0
        for i in range(len(data['brawlers'])):
            if data['brawlers'][i]['power'] == 11:
                text += '*' + brawlers[data['brawlers'][i]['name']] + '* | '
                BrawlersAt11Lvl += 1
            elif data['brawlers'][i]['power'] == 10:
                BrawlersAt10Lvl += 1
        text = text[:len(text)-2] + '\nüî∏ –í—Å–µ–≥–æ 11-—ã—Ö —É—Ä–æ–≤–Ω–µ–π: *' + str(BrawlersAt11Lvl) + '*\nüî∏ –í—Å–µ–≥–æ 10-—ã—Ö —É—Ä–æ–≤–Ω–µ–π: *' + str(BrawlersAt10Lvl) + '*'
    return text

@bot.message_handler(commands=['editteams'])
def EditTeams(message):
    id = message.chat.id
    print(id)
    if id != adminchat:
        tasks[id] = ['EditTeams']
        markup = types.InlineKeyboardMarkup(row_width=2)
        text = '*–ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?*\n\n*–¢–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:*'
        for i in range(1, 11):
            text += '\n*–ö–æ–º–∞–Ω–¥–∞ ' + str(i) + ':* ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if str(teams['Team' + str(i)]['users'][0]) == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams['Team' + str(i)]['users'][0]]["Name"]) + ', ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if str(teams['Team' + str(i)]['users'][1]) == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams['Team' + str(i)]['users'][1]]["Name"]) + ', ' + ("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" if str(teams['Team' + str(i)]['users'][2]) == "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ" else settings["user"][teams['Team' + str(i)]['users'][2]]["Name"]) + '. '
        for i in range(1, 11, 2):
            markup.add(types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥–∞ ' + str(i), callback_data='1' + 'Team' + str(i)), types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥–∞ ' + str(i+1), callback_data='1' + 'Team' + str(i)))
        bot.send_message(id, text, reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['settime'])
def SetTime(message):
    id = message.chat.id
    tasks[id] = ['SetTime', {'17': ['17:00', '17:20', '17:40'], '18': ['18:00', '18:20', '18:40'], '19': ['19:00', '19:20', '19:40'], '20': ['20:00', '20:20', '20:40'], '21': ['21:00', '21:20', '21:40'], '22': ['22:00', '22:20', '22:40'], '23': ['23:00', '23:20', '23:40'], '08': ['08:00', '08:20', '08:40'], '09': ['09:00', '09:20', '09:40'], '10': ['10:00', '10:20', '10:40'], '11': ['11:00', '11:20', '11:40'], '12': ['12:00', '12:20', '12:40'], '13': ['13:00', '13:20', '13:40'], '14': ['14:00', '14:20', '14:40'], '15': ['15:00', '15:20', '15:40'], '16': ['16:00', '16:20', '16:40']}] 
    markup = types.InlineKeyboardMarkup(row_width=3)
    for i in tasks[id][1].keys():
        markup.add(types.InlineKeyboardButton(tasks[id][1][str(i)][0], callback_data='4' + str(i)+':00'), types.InlineKeyboardButton(tasks[id][1][str(i)][1], callback_data='4' + str(i)+':20'), types.InlineKeyboardButton(tasks[id][1][str(i)][2], callback_data='4' + str(i)+':40'))
    bot.send_message(id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–∞, –∫–æ–≥–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç—ã–≥—Ä–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –ª–∏–≥—É?', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def HandleText(message):
    id = message.chat.id
    tag = message.text.upper()
    if CheckMessage(message) == 1:
        if id in tasks:
            if tasks[id][0] == 'JoiningTheClub':
                text = GetUserStats(tag)
                if text[0] != '–ò':
                    tasks[id] = ['WaitingForResults', message.from_user.first_name, message.from_user.username, tag, text]
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    btn1 = types.InlineKeyboardButton(' –ü–†–ò–ù–Ø–¢–¨ ', callback_data='+' + str(id))
                    btn2 = types.InlineKeyboardButton(' –û–¢–ö–õ–û–ù–ò–¢–¨ ', callback_data='-' + str(id))
                    markup.add(btn1, btn2)
                    bot.send_message(id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
                    bot.send_message(adminchat, '*–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:*\nüî∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + message.from_user.username + '\n' + text, parse_mode='Markdown', reply_markup=markup)
                else:
                    bot.send_message(id, text)
            elif message.chat.id != adminchat and tasks[id][0] == 'GetPlayerInfo':
                text = GetUserStats(text)
                if text[0] != '–ò':
                    bot.send_message(id, '*–ò–Ω—Ñ–æ–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –∏–≥—Ä–æ–∫–µ:*\n' + text, parse_mode='Markdown')
                    del tasks[id]
                else:
                    bot.send_message(id, text)
            else:
                bot.send_message(id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é‚òπÔ∏è')

@bot.callback_query_handler(func=lambda callback: callback.data[0] == '+' or callback.data[0] == '-')
def callback1(call): #–ö–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å –∏ –û—Ç–∫–ª–æ–Ω–∏—Ç—å
    id = int(call.data[1:])
    if call.data[0] == '+':
        bot.answer_callback_query(call.id, text='–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='*–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:*\n' + str(tasks[id][4]) +'\n*–ü—Ä–∏–Ω—è—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ' + call.from_user.first_name + '*', parse_mode='Markdown')
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton(' –ö–ª—É–± ', url='https://link.brawlstars.com/invite/band/ru?tag=28U82UGGV&token=2rfhzttd')
        btn2 = types.InlineKeyboardButton(' –ë–µ—Å–µ–¥–∞ –∫–ª—É–±–∞ ', url='https://t.me/+89YGgnypEvRhZWFi')
        markup.add(btn1, btn2)
        bot.send_message(id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ *–ø—Ä–∏–Ω—è—Ç–∞*! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π –∫–ª—É–±.\n', reply_markup=markup, parse_mode='Markdown')
        settings['userlist'].append(id)
        settings['user'][id] = {'Name': tasks[id][1], 'Username':  tasks[id][2], 'Tag': tasks[id][3], 'TimeForCL': [], 'ClubTrophies': 0, 'Team': 1}
        with open('config.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(settings, f, sort_keys=False, allow_unicode=True)
        del tasks[id]
    elif call.data[0] == '-':
        bot.answer_callback_query(call.id, text='–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='*–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:*\n' + str(tasks[id][4]) +'\n*–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ' + call.from_user.first_name + '*', parse_mode='Markdown')
        bot.send_message(id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ *–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*.', parse_mode='Markdown')
        del tasks[id]
        
@bot.callback_query_handler(func=lambda callback: callback.data[0] == '1')
def callback2(call): #–í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    id = call.message.chat.id
    team = call.data[1:]
    tasks[id].append(team)
    markup = types.InlineKeyboardMarkup(row_width=3)
    for i in range(3):
        if teams[team]['users'][i] != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
            markup.add(types.InlineKeyboardButton(settings["user"][teams[team]['users'][i]]["Name"], callback_data='2' + str(i)))
        else:
            markup.add(types.InlineKeyboardButton("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ", callback_data='2' + str(i)))
    bot.edit_message_text(chat_id=id, message_id=call.message.message_id, text='–ö–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
    
@bot.callback_query_handler(func=lambda callback: callback.data[0] == '2')
def callback3(call): #–∑–∞–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
    id = call.message.chat.id
    team = tasks[id][1]
    player = int(call.data[1:])
    n = len(settings['userlist'])
    tasks[id] = ['ChangeUser', team, player]
    markup = types.InlineKeyboardMarkup(row_width=3)
    if n >= 3:
        for i in range(0, (n - n % 3), 3):
            markup.add(types.InlineKeyboardButton(settings["user"][settings['userlist'][i]]["Name"], callback_data='3' + str(settings['userlist'][i])), types.InlineKeyboardButton(settings["user"][settings['userlist'][i+1]]["Name"], callback_data='3' + str(settings['userlist'][i+1])), types.InlineKeyboardButton(settings["user"][settings['userlist'][i+2]]["Name"], callback_data='3' + str(settings['userlist'][i+2])))
    if n % 3 == 2:
        markup.add(types.InlineKeyboardButton(settings["user"][settings['userlist'][n-2]]["Name"], callback_data='3' + str(settings['userlist'][n-2])), types.InlineKeyboardButton(settings["user"][settings['userlist'][n-1]]["Name"], callback_data='3' + str(settings['userlist'][n-1])), types.InlineKeyboardButton('–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', callback_data='3' + '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'))
    elif n % 3 == 1:
        markup.add(types.InlineKeyboardButton(settings['user'][settings['userlist'][n-1]]['Name'], callback_data='3' + str(settings['userlist'][n-1])), types.InlineKeyboardButton('–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', callback_data='3' + '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'))    
    bot.edit_message_text(chat_id=id, message_id=call.message.message_id, text='–ù–∞ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + str(teams[team]['users'][player]) + '?', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: callback.data[0] == '3')
def callback4(call): #—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã
    id = call.message.chat.id
    replacement = int(call.data[1:])
    print(teams[tasks[id][1]]['users'][tasks[id][2]])
    print(settings["user"][replacement]["Name"])
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + str(teams[tasks[id][1]]['users'][tasks[id][2]])  + ' –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ ' + settings["user"][replacement]["Name"])
    teams[tasks[id][1]]['users'][tasks[id][2]] = replacement
    with open('teams.yaml', 'w', encoding='utf-8') as f:
        yaml.dump(teams, f, sort_keys=False, allow_unicode=True)
    del tasks[id]
@bot.callback_query_handler(func=lambda callback: callback.data[0] == '4')
def callback5(call): 
    id = call.message.chat.id
    markup = types.InlineKeyboardMarkup(row_width=3)
    time = call.data[1:]
    if time[3:] == '00': 
        if tasks[id][1][time[:2]][0][0] != '‚úÖ':
            tasks[id][1][time[:2]][0] = '‚úÖ' + tasks[id][1][time[:2]][0]
        else:
            tasks[id][1][time[:2]][0] = tasks[id][1][time[:2]][0][1:]
    elif time[3:] == '20': 
        if tasks[id][1][time[:2]][1][0] != '‚úÖ':
            tasks[id][1][time[:2]][1] = '‚úÖ' + tasks[id][1][time[:2]][1]
        else:
            tasks[id][1][time[:2]][1] = tasks[id][1][time[:2]][1][1:]
    else: 
        if tasks[id][1][time[:2]][2][0] != '‚úÖ':
            tasks[id][1][time[:2]][2] = '‚úÖ' + tasks[id][1][time[:2]][2]
        else:
            tasks[id][1][time[:2]][2] = tasks[id][1][time[:2]][2][1:]
    for i in tasks[id][1].keys():
        markup.add(types.InlineKeyboardButton(tasks[id][1][str(i)][0], callback_data='4' + str(i)+':00'), types.InlineKeyboardButton(tasks[id][1][str(i)][1], callback_data='4' + str(i)+':20'), types.InlineKeyboardButton(tasks[id][1][str(i)][2], callback_data='4' + str(i)+':40'))
    markup.add(types.InlineKeyboardButton('–°–û–•–†–ê–ù–ò–¢–¨', callback_data='5'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–∞, –∫–æ–≥–¥–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç—ã–≥—Ä–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –ª–∏–≥—É?', reply_markup=markup)
@bot.callback_query_handler(func=lambda callback: callback.data[0] == '5')
def callback6(call): 
    for i in tasks[call.message.chat.id][1].keys():
        for j in range(3):
            if tasks[call.message.chat.id][1][str(i)][j][0] == '‚úÖ':
                settings["user"][call.message.chat.id]["TimeForCL"].append(str(tasks[call.message.chat.id][1][str(i)][j][1:]))
    if len(settings["user"][call.message.chat.id]["TimeForCL"]) == 5:
        bot.answer_callback_query(call.id, text='–í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 5 –≤—Ä–µ–º–µ–Ω!')
    with open('config.yaml', 'w', encoding='utf-8') as f:
        yaml.dump(settings, f, sort_keys=False, allow_unicode=True)
    text = FindCommonTime("Team" + str(settings["user"][call.message.chat.id]["Team"]), call.message.chat.id)
    if text[0] == "–°":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text)
    else:
        for i in teams["Team" + str(settings["user"][call.message.chat.id]["Team"])]["users"]:
            if i != "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ":
                bot.send_message(i, "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–∞. " + text)
bot.infinity_polling()